input AddGradeInput {
  id: String!
  lesson: String
  score: Int
  clientMutationId: String
}

type AddGradePayload {
  student: Student
  clientMutationId: String
}

input AddNoteInput {
  id: String
  name: String
  url: String
  clientMutationId: String
}

type AddNotePayload {
  lesson: Lesson
  clientMutationId: String
}

input AddQuestionInput {
  question: InputQuestion
  lessonId: String
  clientMutationId: String
}

type AddQuestionPayload {
  lesson: Lesson
  clientMutationId: String
}

input AddStudentWorksheetCopyInput {
  studentID: String
  lessonID: String
  url: String
  clientMutationId: String
}

type AddStudentWorksheetCopyPayload {
  student: Student
  clientMutationId: String
}

input AddURLInput {
  id: String
  url: String
  clientMutationId: String
}

type AddURLPayload {
  student: Student
  clientMutationId: String
}

input AddWorksheetInput {
  id: String
  name: String
  url: String
  clientMutationId: String
}

type AddWorksheetPayload {
  lesson: Lesson
  clientMutationId: String
}

# Administrator
type Admin implements Node {
  # The ID of an object
  id: ID!
  name: String
  email: String
}

# The name of the answer and if its correct or not
type Answer {
  answerName: String
  isCorrect: Boolean
}

input AssignStudentToTeacherInput {
  studentID: String
  teacherID: String
  clientMutationId: String
}

type AssignStudentToTeacherPayload {
  student: Student
  clientMutationId: String
}

input CreateAdminInput {
  name: String!
  email: String!
  clientMutationId: String
}

type CreateAdminPayload {
  admin: Admin
  clientMutationId: String
}

input CreateLessonInput {
  name: String!
  quiz: InputQuiz
  worksheetName: String
  worksheetURL: String
  notesName: String
  notesURL: String
  clientMutationId: String
}

type CreateLessonPayload {
  lesson: Lesson
  clientMutationId: String
}

input CreateStudentInput {
  name: String!
  email: String!
  clientMutationId: String
}

type CreateStudentPayload {
  student: Student
  clientMutationId: String
}

input CreateTeacherInput {
  name: String!
  email: String!
  clientMutationId: String
}

type CreateTeacherPayload {
  teacher: Teacher
  clientMutationId: String
}

input DeleteAdminInput {
  id: String!
  clientMutationId: String
}

type DeleteAdminPayload {
  admin: Admin
  clientMutationId: String
}

input DeleteLessonInput {
  id: String!
  clientMutationId: String
}

type DeleteLessonPayload {
  lesson: Lesson
  clientMutationId: String
}

input DeleteNoteInput {
  id: String
  clientMutationId: String
}

type DeleteNotePayload {
  lesson: Lesson
  clientMutationId: String
}

input deleteQuestionInput {
  questionId: String!
  lessonId: String!
  clientMutationId: String
}

type deleteQuestionPayload {
  lesson: Lesson
  clientMutationId: String
}

input DeleteStudentInput {
  id: String!
  clientMutationId: String
}

type DeleteStudentPayload {
  student: Student
  clientMutationId: String
}

input DeleteTeacherInput {
  id: String!
  clientMutationId: String
}

type DeleteTeacherPayload {
  teacher: Teacher
  clientMutationId: String
}

input DeleteWorksheetInput {
  id: String
  clientMutationId: String
}

type DeleteWorksheetPayload {
  lesson: Lesson
  clientMutationId: String
}

input EditLessonInput {
  id: String
  newName: String
  clientMutationId: String
}

type EditLessonPayload {
  lesson: Lesson
  clientMutationId: String
}

# Grade received on a quiz
type Grade {
  lesson: String
  score: Int
}

# Input type of answer
input InputAnswer {
  answerName: String
  isCorrect: Boolean
}

# Input type of question
input InputQuestion {
  questionName: String
  answers: [InputAnswer]
}

# Input type of quiz
input InputQuiz {
  name: String
  questions: [InputQuestion]
  lessonID: String
}

# Input type of answer for a given question
input InputSubmittedAnswer {
  questionID: String
  answerChosen: String
}

# GraphQLList of Answered Questions
input InputSubmittedAnswers {
  submissions: [InputSubmittedAnswer]
}

# Schema design for lessons
type Lesson implements Node {
  # The ID of an object
  id: ID!
  name: String
  quiz: Quiz
  worksheetName: String
  worksheetURL: String
  notesName: String
  notesURL: String
}

# Your Root Mutation
type Mutation {
  createStudent(input: CreateStudentInput!): CreateStudentPayload
  createTeacher(input: CreateTeacherInput!): CreateTeacherPayload
  createAdmin(input: CreateAdminInput!): CreateAdminPayload
  deleteAdmin(input: DeleteAdminInput!): DeleteAdminPayload
  deleteTeacher(input: DeleteTeacherInput!): DeleteTeacherPayload
  addGrade(input: AddGradeInput!): AddGradePayload
  assignStudentToTeacher(input: AssignStudentToTeacherInput!): AssignStudentToTeacherPayload
  submitQuiz(input: SubmitQuizInput!): SubmitQuizPayload
  addQuestion(input: AddQuestionInput!): AddQuestionPayload
  createLesson(input: CreateLessonInput!): CreateLessonPayload
  deleteLesson(input: DeleteLessonInput!): DeleteLessonPayload
  addNote(input: AddNoteInput!): AddNotePayload
  deleteNote(input: DeleteNoteInput!): DeleteNotePayload
  addWorksheet(input: AddWorksheetInput!): AddWorksheetPayload
  deleteWorksheet(input: DeleteWorksheetInput!): DeleteWorksheetPayload
  addStudentWorksheetCopy(input: AddStudentWorksheetCopyInput!): AddStudentWorksheetCopyPayload
  removeStudentWorksheetCopy(input: undefinedInput!): undefinedPayload
  deleteStudent(input: DeleteStudentInput!): DeleteStudentPayload
  addURL(input: AddURLInput!): AddURLPayload
  deleteQuestion(input: deleteQuestionInput!): deleteQuestionPayload
  editLesson(input: EditLessonInput!): EditLessonPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Previously submitted quizzes
type PastQuiz {
  lessonID: String
  quizName: String
  score: Float
  submittedAnswers: [SubmittedAnswer]
}

# Your Root Query
type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  students: [Student]
  teachers: [Teacher]
  admins: [Admin]
  lessons: [Lesson]
}

# Question with multiple choice answers
type Question {
  id: ID
  questionName: String
  answers: [Answer]
}

# Quiz with multiple questions
type Quiz {
  name: String
  questions: [Question]
  lessonID: String
}

# Self Descriptive
type Student implements Node {
  # The ID of an object
  id: ID!
  name: String
  email: String
  teacher: Teacher
  grades: [Grade]
  pastQuizzes: [PastQuiz]
  worksheets: [Worksheet]
  URL: String
  topScore: Float
}

input SubmitQuizInput {
  id: String
  lessonID: String
  answeredQuestions: InputSubmittedAnswers
  clientMutationId: String
}

type SubmitQuizPayload {
  student: Student
  clientMutationId: String
}

# Self Descriptive
type SubmittedAnswer {
  questionID: String
  answerChosen: String
}

# Teacher
type Teacher implements Node {
  # The ID of an object
  id: ID!
  name: String
  email: String

  # Students that the teacher teachers
  students: [Student]
}

input undefinedInput {
  studentID: String
  lessonID: String
  clientMutationId: String
}

type undefinedPayload {
  student: Student
  clientMutationId: String
}

# Student worksheet for a specific lesson
type Worksheet {
  lessonID: String
  url: String
}
