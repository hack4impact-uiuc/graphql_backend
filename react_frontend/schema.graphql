# Administrator
type Admin {
  # The ID of an object
  id: ID!
  name: String
  email: String
}

# Self Descriptive
type Answer {
  answerName: String
  isCorrect: Boolean
}

input CreateStudentInput {
  name: String!
  email: String!
  clientMutationId: String
}

type CreateStudentPayload {
  student: Student
  clientMutationId: String
}

# Grade received on a quiz
type Grade {
  lesson: String
  score: Int
}

# Schema design for lessons
type Lesson {
  # The ID of an object
  id: ID!
  name: String
  quiz: String
  worksheetName: String
  worksheetURL: String
  notesName: String
  notesURL: String
}

# Your Root Mutation
type Mutation {
  createStudent(input: CreateStudentInput!): CreateStudentPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Your Root Query
type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  students: [Student]
  teachers: [Teacher]
  admins: [Admin]
  lessons: [Lesson]
  quiz: [Quiz]
}

# Self Descriptive
type Question {
  questionName: String
  answers: [Answer]
}

# Self Descriptive
type Quiz {
  # The ID of an object
  id: ID!
  name: String
  questions: [Question]
}

# Self Descriptive
type Student implements Node {
  # The ID of an object
  id: ID!
  name: String
  email: String
  teacher: Teacher
  grades: [Grade]
}

# Teacher
type Teacher implements Node {
  # The ID of an object
  id: ID!
  name: String
  email: String

  # Students that the teacher teachers
  students: [Student]
}
